// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-ndarray-like@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-multi-slice@v0.1.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array-like-object@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import{isPrimitive as i}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-read-only@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-multi@v0.1.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-slice-assign@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-shape@v0.1.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";function h(h,p,c){var j,v,f,g,u,b,y;if(f={strict:!0},v=arguments.length,!t(h))throw new TypeError(l("invalid argument. First argument must be an ndarray. Value: `%s`.",h));if(!t(p))throw new TypeError(l("invalid argument. Second argument must be an ndarray. Value: `%s`.",p));if(n(p))throw new Error("invalid argument. Cannot write to a read-only array.");if(e(arguments[v-1])){if(o(j=arguments[v-=1],"strict")){if(!i(j.strict))throw new TypeError(l("invalid option. `%s` option must be a boolean. Option: `%s`.","strict",j.strict));f.strict=j.strict}if(u=d(p),2===v&&u.length>0)throw new RangeError(l("invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",u.join(","),0))}if(r(c)){if(b=c,v>3)throw new Error("invalid invocation. Too many arguments.")}else{if(s(c)){if(g=c,v>3)throw new Error("invalid invocation. Too many arguments.")}else for(g=[],y=2;y<v;y++)g.push(arguments[y]);try{b=a.apply(null,g)}catch(t){for(y=0;y<g.length;y++)try{new a(g[y])}catch(t){throw new TypeError(l("invalid argument. Slice arguments must be either a Slice, integer, null, or undefined. Value: `%s`.",String(g[y])))}}}return m(h,p,b,f.strict)}export{h as default};
//# sourceMappingURL=index.mjs.map
